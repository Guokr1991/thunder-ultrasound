__kernel void trace_intersections(__global float4 * intersections, 
                                  int volume_w, 
                                  int volume_h, 
                                  int volume_n, 
                                  float volume_spacing, 
                                  __global float4 * bscan_plane_equation_queue,
                                  int axis) {

  float4 Rd = {axis == 0, axis == 1, axis == 2, 0};

  int iter_end[3] = {(axis != 0)*volume_w+(axis==0), (axis != 1)*volume_h+(axis==1), (axis != 2)*volume_n+(axis==2)};

  int n = get_global_id(0);
  if (n >= iter_end[0]*iter_end[1]*iter_end[2]) return;

  int x = (axis != 0);
  int y = (axis != 1);
  int z = (axis != 2);

  if (axis == 0) {
    y = n%volume_h;
    z = n/volume_h;
  }
  if (axis == 1) {
    x = n%volume_w;
    z = n/volume_w;
  }
  if (axis == 2) {
    x = n%volume_w;
    y = n/volume_w;
  }

  bool invalid = false;
  for (int f = 0; f < 2; f++) {
    int i = f==0 ? BSCAN_WINDOW/2-1 : BSCAN_WINDOW/2; // Fill voxels between two middle bscans
    //int i = f==0 ? BSCAN_WINDOW/2-BSCAN_WINDOW/4-1 : BSCAN_WINDOW/2+BSCAN_WINDOW/4; // Alternatively fill voxels between BSCAN_WINDOW/2 middle bscans
    //int i = f==0 ? 0 : BSCAN_WINDOW-1; // Alternatively fill voxels between first and last bscan
    float4 Pn = {bscan_plane_equation_queue[i].x, bscan_plane_equation_queue[i].y, bscan_plane_equation_queue[i].z, 0};
    float4 R0 = {x*volume_spacing, y*volume_spacing, z*volume_spacing, 0};
    float Vd = dot(Pn, Rd);
    float V0 = -(dot(Pn, R0) + bscan_plane_equation_queue[i].w);
    float t = V0/Vd;
    if (Vd == 0) invalid = true;

    float4 intersection = R0 + t*Rd;
    intersections[n*2 + f] = intersection;
  }
}

__kernel void adv_fill_voxels(__global float4 * intersections, 
                              __global unsigned char * volume,
                              float volume_spacing, 
                              int volume_w, 
                              int volume_h, 
                              int volume_n, 
                              __global float4 * x_vector_queue, 
                              __global float4 * y_vector_queue, 
                              __global plane_pts * plane_points_queue,
                              __global float4 * bscan_plane_equation_queue,
                              float bscan_spacing_x,
                              float bscan_spacing_y,
                              int bscan_w,
                              int bscan_h,
                              __global unsigned char * mask,
                              __global unsigned char * bscans_queue,
                              __global float * bscan_timetags_queue,
                              int intersection_counter) {

  int i = get_global_id(0);
  if (i >= intersection_counter) return;

  float4 intrs0 = intersections[i*2 + 0]/volume_spacing;
  float4 intrs1 = intersections[i*2 + 1]/volume_spacing;

  int x0 = min(intrs0.x,intrs1.x);
  int x1 = max(x0+1.0f, max(intrs0.x,intrs1.x));
  int y0 = min(intrs0.y,intrs1.y);
  int y1 = max(y0+1.0f, max(intrs0.y,intrs1.y));
  int z0 = min(intrs0.z,intrs1.z);
  int z1 = max(z0+1.0f, max(intrs0.z,intrs1.z));

  int safety = 0;
  for (int z = z0; z <= z1; z++) {
    for (int y = y0; y <= y1; y++) {
      for (int x = x0; x <= x1; x++) {
        float4 voxel_coord = {x*volume_spacing,y*volume_spacing,z*volume_spacing,0};
        if (inrange(x, 0, volume_w) && inrange(y, 0, volume_h) && inrange(z, 0, volume_n)) {
          float contribution = 0;
          if (PT_OR_DW) { // DW
            float dists[BSCAN_WINDOW];
            unsigned char bilinears[BSCAN_WINDOW];
            bool valid = true;
            float G = 0;
            for (int n = 0; n < BSCAN_WINDOW; n++) {
              int q_idx = n;

              float4 normal = {bscan_plane_equation_queue[q_idx].x, bscan_plane_equation_queue[q_idx].y, bscan_plane_equation_queue[q_idx].z, 0};

              float dist0 = fabs(distance_pp(voxel_coord, bscan_plane_equation_queue[q_idx]));
              float4 p0 = voxel_coord + -dist0*normal - plane_points_queue[q_idx].corner0;
              float px0 = dot(p0, x_vector_queue[q_idx])/bscan_spacing_x;
              float py0 = dot(p0, y_vector_queue[q_idx])/bscan_spacing_y;
              float xa = px0-floor(px0);
              float ya = py0-floor(py0);
              int xa0 = (int)px0;
              int ya0 = (int)py0;

              bool valid0 = false;
              
              if (inrange(xa0, 0, bscan_w) && inrange(ya0, 0, bscan_h) && inrange(xa0+1, 0, bscan_w) && inrange(ya0+1, 0, bscan_h)) {
                if (mask[xa0 + ya0*bscan_w] != 0 && mask[xa0+1 + (ya0+1)*bscan_w] != 0 && mask[xa0+1 + ya0*bscan_w] != 0 && mask[xa0 + (ya0+1)*bscan_w] != 0) {
                  bilinears[n] = bscans_queue_a(q_idx,xa0,ya0)*(1-xa)*(1-ya) + bscans_queue_a(q_idx,xa0+1,ya0)*xa*(1-ya) + bscans_queue_a(q_idx,xa0,ya0+1)*(1-xa)*ya + bscans_queue_a(q_idx,xa0+1,ya0+1)*xa*ya;
                  valid0 = true;
                }
              }

              valid &= valid0;
              dists[n] = dist0;

              G += 1/dists[n];
              contribution += bilinears[n]/dists[n];  
            }

            if (!valid) continue;

            contribution /= G;
            
          } else { // PT
            // Find virtual plane time stamp:
            float dists[4];
            bool valid = true;
            for (int n = 0; n < 4; n++) {
              int q_idx = BSCAN_WINDOW/2-2+n;

              float4 normal = {bscan_plane_equation_queue[q_idx].x, bscan_plane_equation_queue[q_idx].y, bscan_plane_equation_queue[q_idx].z, 0};

              float dist0 = fabs(distance_pp(voxel_coord, bscan_plane_equation_queue[q_idx]));
              float4 p0 = voxel_coord + -dist0*normal - plane_points_queue[q_idx].corner0;
              float px0 = dot(p0, x_vector_queue[q_idx])/bscan_spacing_x;
              float py0 = dot(p0, y_vector_queue[q_idx])/bscan_spacing_y;
              float xa = px0-floor(px0);
              float ya = py0-floor(py0);
              int xa0 = (int)px0;
              int ya0 = (int)py0;

              bool valid0 = false;
              float bilinear0;

              if (inrange(xa0, 0, bscan_w) && inrange(ya0, 0, bscan_h) && inrange(xa0+1, 0, bscan_w) && inrange(ya0+1, 0, bscan_h))
                if (mask[xa0 + ya0*bscan_w] != 0 && mask[xa0+1 + (ya0+1)*bscan_w] != 0 && mask[xa0+1 + ya0*bscan_w] != 0 && mask[xa0 + (ya0+1)*bscan_w] != 0)
                  valid0 = true;

              dists[n] = dist0;

              valid &= valid0;
            }
            if (!valid) continue;
            float G = dists[1] + dists[2];
            float t = dists[2]/G*bscan_timetags_queue[BSCAN_WINDOW/2-1] + dists[1]/G*bscan_timetags_queue[BSCAN_WINDOW/2];

            // Cubic interpolate 4 bscan plane equations, corner0s and x- and y-vectors:
            float4 v_plane_eq = {0,0,0,0};
            float4 v_corner0 = {0,0,0,0};
            float4 v_x_vector = {0,0,0,0};
            float4 v_y_vector = {0,0,0,0};
            for (int k = 0; k < 4; k++) {
              int q_idx = BSCAN_WINDOW/2-2+k;
              float phi = 0;
              float a = -1/2.0f;
              float abs_t = fabs((t-bscan_timetags_queue[q_idx]))/(bscan_timetags_queue[1]-bscan_timetags_queue[0]);
              if (inrange(abs_t, 0, 1))
                phi = (a+2)*abs_t*abs_t*abs_t - (a+3)*abs_t*abs_t + 1;
              else if (inrange(abs_t, 1, 2))
                phi = a*abs_t*abs_t*abs_t - 5*a*abs_t*abs_t + 8*a*abs_t - 4*a;
              v_plane_eq += bscan_plane_equation_queue[q_idx]*phi;
              v_corner0 += phi*plane_points_queue[q_idx].corner0;
              v_x_vector += phi*x_vector_queue[q_idx];
              v_y_vector += phi*y_vector_queue[q_idx];
            }

            // Find 2D coordinates on virtual plane:
            float4 p0 = voxel_coord - v_corner0;
            float px0 = dot(p0, v_x_vector)/bscan_spacing_x;
            float py0 = dot(p0, v_y_vector)/bscan_spacing_y;
            float xa = px0-floor(px0);
            float ya = py0-floor(py0);
            int xa0 = (int)px0;
            int ya0 = (int)py0;

            // Distance weight 4 bilinears:
            float F = 0;
            for (int n = 0; n < 4; n++) {
              int q_idx = BSCAN_WINDOW/2-2+n;
              float bilinear0 = bscans_queue_a(q_idx,xa0,ya0)*(1-xa)*(1-ya) + bscans_queue_a(q_idx,xa0+1,ya0)*xa*(1-ya) + bscans_queue_a(q_idx,xa0,ya0+1)*(1-xa)*ya + bscans_queue_a(q_idx,xa0+1,ya0+1)*xa*ya;
              F += 1/dists[n];
              contribution += bilinear0/dists[n];
            }
            contribution /= F;
          }

          if (COMPOUND_METHOD == COMPOUND_AVG)
            if (volume_a(x,y,z) != 0) volume_a(x,y,z) = (volume_a(x,y,z) + contribution)/2;  else volume_a(x,y,z) = contribution;
          if (COMPOUND_METHOD == COMPOUND_MAX)
            if (contribution > volume_a(x,y,z)) volume_a(x,y,z) = contribution;
          if (COMPOUND_METHOD == COMPOUND_IFEMPTY)
            if (volume_a(x,y,z) == 0) volume_a(x,y,z) = contribution;
          if (COMPOUND_METHOD == COMPOUND_OVERWRITE)
            volume_a(x,y,z) = contribution;
        }  
      }
    }
  }
}